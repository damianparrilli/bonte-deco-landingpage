---
const { id, consulta } = Astro.props;
---

<section
  id={id}
  class={`overflow-hidden xl:flex xl:items-center xl:min-h-[80dvh] ${consulta}`}
>
  <form
    id="contactoForm"
    name="contacto"
    class="container otros flex flex-col gap-2"
    novalidate="true"
    data-netlify="true"
    netlify-honeypot="bot-field"
    method="POST"
  >
    <p class="hidden">
      <label>
        Don’t fill this out if you’re human: <input name="bot-field" />
      </label>
    </p>
    <h2 class="text-3xl sm:text-4xl">Contacto</h2>
    <slot />
    <div class="flex md:flex-row flex-col gap-2 sm:gap-4 w-full">
      <div class="w-full flex flex-col md:gap-x-3">
        <label for="nombre">Nombre</label>
        <input type="text" id="nombre" name="nombre" class="w-full" />
        <p class="texto-error" id="texto-error-nombre">*</p>
      </div>
      <div class="w-full flex flex-col">
        <label for="telefono">Teléfono</label>
        <input type="text" id="telefono" name="telefono" class="w-full" />
        <p class="texto-error" id="texto-error-telefono">*</p>
      </div>
    </div>
    <div class="flex flex-col w-full">
      <label for="email">Email</label>
      <input type="email" id="email" name="email" />
      <p class="texto-error" id="texto-error-email">*</p>
    </div>
    <div class="flex flex-col w-full">
      <label for="mensaje">Mensaje</label>
      <textarea id="mensaje" name="mensaje" class="min-h-24"></textarea>
      <p class="texto-error" id="texto-error-mensaje">*</p>
    </div>

    <p id="waitingMessage" class="texto-error-envio">
    </p>
      <slot name="infoForm" />
    <input
      type="submit"
      class="bg-[#547498] hover:bg-[#39608d] transition ease-in-out duration-200 w-full cursor-pointer px-5 py-3 sm:px-10 sm:py-3 rounded-[0.7rem] text-base sm:text-lg text-white"
      value="Enviar"
    />

    <div id="hs-vertically-centered-modal" class="hs-overlay hidden size-full fixed top-0 start-0 z-[1000] overflow-x-hidden overflow-y-auto pointer-events-none" role="dialog" tabindex="-1" aria-labelledby="hs-vertically-centered-modal-label">
      <div class="hs-overlay-open:mt-7 hs-overlay-open:opacity-100 hs-overlay-open:duration-500 mt-0 opacity-0 ease-out transition-all sm:max-w-lg sm:w-full m-3 sm:mx-auto min-h-[calc(100%-3.5rem)] flex items-center">
        <div class="w-full flex pb-3 flex-col shadow-sm rounded-xl pointer-events-auto bg-[#f9f9f9]">
          <div class="flex justify-end items-center py-3 px-4">
            <button type="button" class="size-8 inline-flex justify-center items-center gap-x-2 rounded-full  bg-gray-100 text-gray-800 hover:bg-gray-200 focus:outline-none focus:bg-gray-200 disabled:opacity-50 disabled:pointer-events-none " aria-label="Close" data-hs-overlay="#hs-vertically-centered-modal">
              <span class="sr-only">Close</span>
              <svg class="shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M18 6 6 18"></path>
                <path d="m6 6 12 12"></path>
              </svg>
            </button>
          </div>
          <div class="p-4 overflow-y-auto">
            <p class= "text-center" >
              Mensaje enviado con éxito. <br> ¡Muchas gracias por contactarte con nosotras!
            </p>
          </div>
          <div class="flex justify-center items-center gap-x-2 py-3 px-4 ">
            <button type="button" class="bg-[#547498] hover:bg-[#39608d] transition ease-in-out duration-200 cursor-pointer px-8 py-3 rounded-[0.7rem] text-sm text-white disabled:opacity-50 disabled:pointer-events-none" data-hs-overlay="#hs-vertically-centered-modal">
              Cerrar
            </button>
            
          </div>
        </div>
      </div>
    </div>
  </form>
</section>

<style>
  input:not([type="submit"]),
  textarea {
    background-color: #f1eee8;
    border-radius: 0.7rem;
    padding: 10px 15px;
    border: 1px solid #846f54;
    outline: none;
  }

  textarea {
    resize: none;
    field-sizing: content;
  }

  label {
    padding: 5px 0;
  }

  .texto-error {
    color: red;
    font-size: 0.8rem;
    padding: 5px 0;
    visibility: hidden;
  }
  .texto-error-envio {
    color: red;
    font-size: 1rem;
    padding: 5px 0;
    visibility: hidden;
  }

  .texto-error-envio.enviado {
    color: green;
  }

  .error {
    border: 2px solid red !important;
    outline: none;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const contactoForm = document.getElementById("contactoForm");
    let enviado = false;

    const expresiones = {
      nombres: /^[a-zA-ZÀ-ÿ\s]{1,20}$/,
      password: /^(?=.*[A-Za-z0-9])[A-Za-z0-9!@#$%^&*()_+]{4,16}$/,
      correo: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/,
      telefono: /^\d{7,14}$/,
    };

    const nombre = document.getElementById("nombre") as HTMLInputElement;
    const telefono = document.getElementById("telefono") as HTMLInputElement;
    const email = document.getElementById("email") as HTMLInputElement;
    const mensaje = document.getElementById("mensaje") as HTMLInputElement;

    const textoErrorName = document.getElementById("texto-error-nombre");
    const textoErrorTelefono = document.getElementById("texto-error-telefono");
    const textoErrorEmail = document.getElementById("texto-error-email");
    const textoErrorMensaje = document.getElementById("texto-error-mensaje");
    const textoErrorCaptcha = document.getElementById("texto-error-captcha");
    const waitingMessage = document.getElementById("waitingMessage");

    const resetFieldError = (field, errorTextElement) => {
      errorTextElement.style.visibility = "hidden";
      field.classList.remove("error");
    };

    nombre.addEventListener("keyup", () =>
      resetFieldError(nombre, textoErrorName)
    );
    telefono.addEventListener("keyup", () =>
      resetFieldError(telefono, textoErrorTelefono)
    );
    email.addEventListener("keyup", () =>
      resetFieldError(email, textoErrorEmail)
    );
    mensaje.addEventListener("keyup", () =>
      resetFieldError(mensaje, textoErrorMensaje)
    );

    contactoForm.addEventListener("submit", (e) => {
      e.preventDefault();

      let nombreTrue = false;
      let emailTrue = false;
      let telefonoTrue = false;
      let mensajeTrue = false;

      if (nombre.value == "") {
        textoErrorName.textContent = "*Este campo no puede estar vacío";
        textoErrorName.style.visibility = "visible";
        nombre.classList.add("error");
        nombreTrue = false;
      } else if (!expresiones.nombres.test(nombre.value)) {
        textoErrorName.textContent =
          "*Estas usando caracteres inválidos para este campo";
        textoErrorName.style.visibility = "visible";
        nombre.classList.add("error");
        nombreTrue = false;
      } else {
        textoErrorName.style.visibility = "hidden";
        nombre.classList.remove("error");
        nombreTrue = true;
      }

      if (telefono.value == "") {
        textoErrorTelefono.textContent = "*Este campo no puede estar vacío";
        textoErrorTelefono.style.visibility = "visible";
        telefono.classList.add("error");
        telefonoTrue = false;
      } else if (!expresiones.telefono.test(telefono.value)) {
        textoErrorTelefono.textContent = "*El número de teléfono no es válido";
        textoErrorTelefono.style.visibility = "visible";
        telefono.classList.add("error");
        telefonoTrue = false;
      } else {
        textoErrorTelefono.style.visibility = "hidden";
        telefono.classList.remove("error");
        telefonoTrue = true;
      }

      if (email.value == "") {
        textoErrorEmail.textContent = "*Este campo no puede estar vacío";
        textoErrorEmail.style.visibility = "visible";
        email.classList.add("error");
        emailTrue = false;
      } else if (!expresiones.correo.test(email.value)) {
        textoErrorEmail.textContent = "*El correo electrónico no es válido";
        textoErrorEmail.style.visibility = "visible";
        email.classList.add("error");
        emailTrue = false;
      } else {
        textoErrorEmail.style.visibility = "hidden";
        email.classList.remove("error");
        emailTrue = true;
      }

      if (mensaje.value == "") {
        textoErrorMensaje.textContent = "*Este campo no puede estar vacío";
        textoErrorMensaje.style.visibility = "visible";
        mensaje.classList.add("error");
        mensajeTrue = false;
      } else {
        textoErrorMensaje.style.visibility = "hidden";
        mensaje.classList.remove("error");
        mensajeTrue = true;
      }


      if (
        nombreTrue &&
        emailTrue &&
        telefonoTrue &&
        mensajeTrue
      ) {
      
        if (enviado) {
        waitingMessage.innerText = "* Espere para poder enviar otro mensaje";
        waitingMessage.classList.remove("enviado");
          return;
        }

        const overlayTrigger = document.querySelector('[data-hs-overlay="#hs-vertically-centered-modal"]') as HTMLElement;
        overlayTrigger?.click();
        waitingMessage.innerText = "";
        waitingMessage.style.visibility = "visible";
        const myForm = e.target as HTMLFormElement;
        const formData = new FormData(myForm);

        const formObject: Record<string, string> = {};
        formData.forEach((value, key) => {
          formObject[key] =
            typeof value === "string" ? value : value.toString();
        });

        fetch("/", {
          method: "POST",
          headers: { "Content-Type": "application/x-www-form-urlencoded" },
          body: new URLSearchParams(formObject).toString(),
        })
          .then(() => {
            console.log("Form enviado correctamente");

            setTimeout(() => {
              enviado = false;
            }, 5000);
            
        nombre.value = "";
        email.value = "";
        telefono.value = "";
        mensaje.value = "";
            enviado = true;
          })
          .catch((error) => alert(error));
      }
    });
  });
</script>
