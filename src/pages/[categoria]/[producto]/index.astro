---
import Layout from '../../../layouts/Layout.astro';


//Pruebas con API Local
import productos from '../../../../public/productos.json';

export async function getStaticPaths() {
  return productos.map((producto) => ({
    params: { categoria: producto.categoria, producto: producto.nombre }
  }));
}

const { categoria, producto } = Astro.params;
const datosProducto = productos.find((p) => p.categoria === categoria && p.nombre === producto);


//Esto que esta comentado es para cuando se tenga que hacer con una API subida a internet
/* export async function getStaticPaths() {
  const response = await fetch('https://api.sheety.co/21aad7457a5765ba084812ae72c26f5a/bontéDecoBdd/productos');
  const { productos } = await response.json();

  return productos.map((producto) => ({
    params: { categoria: producto.categoria, producto: producto.nombre }
  }));
}

// Obtener parámetros de la ruta
const { categoria, producto } = Astro.params as { categoria: string, producto: string };

// Obtener datos del producto
let datosProducto = null;
try {
  const response = await fetch('https://api.sheety.co/21aad7457a5765ba084812ae72c26f5a/bontéDecoBdd/productos');
  const { productos } = await response.json();
  datosProducto = productos.find((p) => p.categoria === categoria && p.nombre === producto);
} catch (error) {
  console.error('Error al obtener los datos:', error);
} */

---

<Layout
  title={`${datosProducto.titulo} - Bonté Deco`}
  description="Bonté Deco es una empresa dedicada a la venta de productos de decoración de interiores."
  keywords="bonte, bonté, decoración, decoracion, decoracion de interiores, cortinas, almohadones, pillow, pie de cama"
>
  <div class="w-full px-[5%]">
    <div class="container pb-20">
      {datosProducto ? (
          <div class="flex flex-col lg:flex-row gap-4 py-8 h-full justify-start " >
           <div class="flex flex-col items-start lg:flex-row gap-2 w-full lg:max-w-max lg:max-h-[625px] overflow-hidden lg:basis-8/12">
              {}
               <div class="flex order-2 lg:order-1 lg:flex-col lg:h-full max-h-full w-full lg:max-w-[20%] gap-2 lg:gap-4 gallery-scroll">
                {Object.keys(datosProducto)
                 .filter(key => key.startsWith('imagen') && datosProducto[key])  
                  .map((imagenKey, index) => (
                    <input type="radio" name="checkImage" id={`checkImagen${index}` } checked={index === 0 ? true : false} class="image-radio" value={datosProducto[imagenKey]} />
                    <label for={`checkImagen${index}`} class="bg-[#dadada] relative max-h-[130px] lg:max-h-none max-w-[120px]  sm:max-w-[150px] lg:max-w-none flex-shrink-0 flex-grow-0 lg:flex-shrink-1 lg:flex-grow-1" data-key={imagenKey}>  {}
                    <img 
                      src={datosProducto[imagenKey]} 
                     alt={`Imagen ${index + 1} de ${datosProducto.titulo}`}
                   />
                  </label>
                ))}
          </div>
          <div class="flex order-1 lg:order-2 lg:h-full w-full bg-[#f3f0eb]">
            <img src={datosProducto.imagen1} alt="Imagen de producto" id="productoImagen" class="imagen-producto object-contain" />
          </div>
        </div>
        <div class="flex flex-col w-full lg:min-w-[35%] basis-1/3 ">
          <p class="text-xs flex items-center">
          <a href="/#" class="font-medium hover:text-[#5f4d27]">Inicio</a> 
          <span class="mx-2">→</span>
          <a href={`/${datosProducto.categoria}`} class="font-medium hover:text-[#5f4d27]">
           {datosProducto[0]?.nombreCategoria || categoria.charAt(0).toUpperCase() + categoria.slice(1)}
          </a>
          <span class="mx-2">→</span>
          {datosProducto.titulo}
          </p>

          <h1 class="titulo-categoria w-full text-2xl md:text-3xl lg:text-4xl my-4">
            {datosProducto.titulo}
          </h1>
          <form id="consultar-precio"
          data-categoria={datosProducto.categoria} 
          data-producto={datosProducto.nombre}>
            <div class="flex flex-col sm:flex-row items-center justify-center w-full flex-1 gap-4 sm:gap-2 my-8">
              {datosProducto.tipo && (
                <div class="flex flex-col items-start justify-center w-full flex-1 gap-2">
                    <label for="tipo" class="font-semibold text-sm">Tipo</label>
                    <select id="tipo" class="border border-gray-300 rounded px-2 py-1 w-full text-sm">
                    {datosProducto.tipo.split(', ').map((tipo) => (
                   <option value={tipo}>{tipo}</option>
                   ))}
                   </select>
               </div>
               )}
               {datosProducto.color && (
                <div class="flex flex-col items-start justify-center w-full flex-1 gap-2">
                 <label for="color" class="font-semibold text-sm">Color</label>
                  <select id="color" class="border border-gray-300 rounded px-2 py-1 w-full text-sm">
                 {datosProducto.color.split(', ').map((color) => (
                 <option value={color}>{color}</option>
                  ))}
                 </select>
               </div>
               )}
               {datosProducto.tamaño && (
               <div class="flex flex-col items-start justify-center w-full flex-1 gap-2">
                    <label for="tamaño" class="font-semibold text-sm">Tamaño</label>
                    <select id="tamaño" class="border border-gray-300 rounded px-2 py-1 w-full text-sm">
                    {datosProducto.tamaño.split(', ').map((tamano) => (
                    <option value={tamano}>{tamano}</option>
                    ))}
                   </select>
                </div>
                )}
              </div>
              <input type="submit" value="Consultar precio" class="bg-[#547498] hover:bg-[#39608d] transition ease-in-out duration-200 w-full cursor-pointer px-5 py-3 sm:px-10 sm:py-2.5 rounded-[0.7rem] text-base sm:text-lg text-white"/>
          </form>
          <div class="flex flex-col gap-4 py-8 h-full justify-start">
            {datosProducto.tela && (<p class="text-sm"><b>Tela:</b> {datosProducto.tela}</p>)}
            <p class="text-sm">Para consultas, dejanos tu mensaje en <a href="" class="font-medium hover:text-[#5f4d27]">bonte.decotextil@gmail.com</a></p>
            <p class="text-sm">Todos nuestros productos son hechos a mano, con dedicación y amor!</p>
            <img src="/logo-footer.svg" alt="Logo de Bonte Deco para productos" class="logo-producto"/>
          </div>
        </div>
        </div>
      ) : (
        <p>Producto no encontrado.</p>
      )}
    </div>
  </div>
</Layout>

<style>
  img {
    width: 100%;
    height: 100%;
    max-height: 250px;
    object-fit: cover;
  }

  .imagen-producto {
    max-height: none;
    object-fit: contain;
    height: 100%;
    transition: 0.2s ease-in-out;
    }

    .logo-producto {
    object-fit: contain;
    height: 36px;
    width: max-content;
    }

    .gallery-scroll {
  overflow-y: auto; 
  padding-right: 5px;
}

.gallery-scroll input[type="radio"] {
  display: none;
}


.gallery-scroll label{
  cursor: pointer;
}

.gallery-scroll input[type="radio"]:checked + label img{
  opacity: 1;
  transition: .2s ease-in-out;
}

.gallery-scroll input[type="radio"]:not(:checked) + label img{
  opacity: 0.5;
}

@media (hover: hover) and (pointer: fine){
  .gallery-scroll::-webkit-scrollbar {
  width: 6px;
  
}

.gallery-scroll::-webkit-scrollbar-track {
  background: transparent; 
}

.gallery-scroll::-webkit-scrollbar-thumb {
  background: gray;
  border-radius: 4px; 
}
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const radios = document.querySelectorAll('.image-radio');
    const imagenProducto = document.getElementById('productoImagen') as HTMLImageElement;
    
    radios.forEach(radio => {
      radio.addEventListener('change', (e) => {
        const inputRadio = e.target as HTMLInputElement;
        
        if (inputRadio.checked) {
          imagenProducto.style.opacity = '0.7';

          setTimeout(() => {
            imagenProducto.src = inputRadio.value;
            imagenProducto.style.opacity = '1';  
          }, 150); 
        }
      });
    });

    const consultarPrecio = document.getElementById('consultar-precio');

    consultarPrecio.addEventListener('submit', (e) => {
  e.preventDefault();
  const tipo = document.getElementById('tipo') as HTMLInputElement;
  const color = document.getElementById('color') as HTMLInputElement;
  const tamaño = document.getElementById('tamaño') as HTMLInputElement;

  const categoria = consultarPrecio.dataset.categoria as string;
  const producto = consultarPrecio.dataset.producto as string;

  const params = new URLSearchParams();

  if (tipo != null) {
    params.append('tipo', tipo.value);
  }
  if (color != null) {
    params.append('color', color.value);
  }
  if (tamaño != null) {
    params.append('tamaño', tamaño.value);
  }

  window.location.href = `/${categoria}/${producto}/consulta?${params.toString()}`;
});

  });
</script>
